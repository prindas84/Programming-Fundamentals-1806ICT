#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <stdlib.h>
#include <time.h>
#define MAX_LENGTH 128
#define MAX_SYMBOLS 10

double calculate_score();
bool check_board();
char* concat_filename(char* filename, char* score, char* time);
int** create_board_array();
int* create_symbols_array(bool* symbols_in_use);
int delete_file(char* filename);
int delete_file_menu();
int display_board();
void free_memory();
int generate_symbol(int* symbols);
void initialise_saved_game(char* filename);
bool is_adjacent(int fy, int fx, int ty, int tx);
bool is_grouping(int x, int y);
bool is_number(char* str);
bool is_valid_coordinate(int x, int y);
bool is_valid_swap(int fy, int fx, int ty, int tx);
int make_swap();
int open_file_menu();
void populate_board();
void replace_grouping();
int save_game(int time_adjustment);
int saved_games_menu();
void start_clock(int time_adjustment);
int start_new_game(int game_type);
double stop_clock();
void swap_symbols(int fy, int fx, int ty, int tx);
bool validate_filename(char* filename);

int defined_symbols[] = {'!', '$', '%', '&', '?', '#', '+', '=', '*', '@'};
int group_location[3] = {0}, board_size = 0, symbol_count = 0, total_points = 0, swap_points = 0;
int start_seconds = 0, end_seconds = 0, time_adjustment;
bool show_swap_points;
int** game_board;
int* game_symbols;

/*  SHAPE DIAGRAMS       ____        ____           _        _
                        |  __|      |__  |         | |      | |  
                        | |            | |       __| |      | |__
                    1.  |_|     2.     |_|  3.  |____|  4.  |____|        */


int main()
{
    int selection;
    char user_input[MAX_LENGTH];
    srand(time(NULL));
    do
    {
        printf( "\n------------------------------------------------\n\n"
                "MAIN MENU\n\n"
                "1. START A NEW GAME\n"
                "2. VIEW SAVED GAMES\n"
                "3. EXIT THE GAME\n"
                "\n------------------------------------------------\n"
                "PLEASE MAKE A SELECTION FROM THE MENU ABOVE: ");
        fgets(user_input, MAX_LENGTH, stdin);
        if (strlen(user_input) == 2)
        {
            if (user_input[0] == '1')
            {
                selection = start_new_game(0);
                while (selection == 4)
                {
                    selection = start_new_game(0);
                }
            }
            else if (user_input[0] == '2')
            {
                selection = saved_games_menu();
            }
            else if (user_input[0] == '3')
            {
                selection = 0;
            }
            else
            {
                selection = 1;
            }
        }
        else
        {
            selection = 1;
        }
    } while (selection != 0);
    return 0;
}

double calculate_score()
{
    double duration = stop_clock();
    return total_points / duration;
}

bool check_board()
{
    for (int i = 0; i < board_size; i++)
    {
        for (int j = 0; j < board_size; j++)
        {
            if (is_grouping(j, i))
            {
                return true;
            }
        }
    }
    return false;
}

char* concat_filename(char* filename, char* score, char* time)
{
    for (int i = 0; filename[i] != '\0'; i++)
    {
        if (!isalnum(filename[i]))
        {
            filename[i] = '_';
        }
    }   

    for (int j = 0; time[j] != '\0'; j++)
    {
        if (time[j] == ':')
        {
            time[j] = '-';
        }
    }    
    strcat(filename, " - SCORE ");
    strcat(filename, score);
    strcat(filename, " (");
    strcat(filename, time);
    strcat(filename, ")");
    strcat(filename, ".txt");
    return filename;
}

int** create_board_array()
{
    int **board = (int **)malloc(board_size * sizeof(int *));
    for (int i = 0; i < board_size; i++)
    {
        board[i] = (int *)calloc(board_size, sizeof(int));
        if (board[i] == NULL)
        {
            printf("ERROR CREATING THE BOARD");
            exit(0);
        }
    }
    return board;
}

int* create_symbols_array(bool* symbols_in_use)
{
    int* symbols = (int *)calloc(symbol_count, sizeof(int));
    int number;
    if (symbol_count == 10)
    {
        for (int j = 0; j < 10; j++)
        {
            symbols[j] = defined_symbols[j];
        }
    }
    else
    {
        for (int i = 0; i < symbol_count; i++)
        {
            do
            {
                number = rand() % MAX_SYMBOLS + 1;
            } while (symbols_in_use[number]);
            symbols[i] = defined_symbols[number-1];
            symbols_in_use[number] = true;   
        }
    }
    return symbols;
}

int delete_file(char* filename)
{
    printf("\n\nFILE DELETED: %s\n", filename);
    return 1;
}

int delete_file_menu()
{
    int selection;
    char user_input[MAX_LENGTH];
    do
    {
        printf( "\n\n------------------------------------------------\n\n"
                "DELETE A GAME\n\n"
                "1. <filename>\n"
                "2. <filename>\n"
                "0. RETURN TO VIEW SAVED GAMES MENU\n"
                "\n------------------------------------------------\n"
                "PLEASE MAKE A SELECTION FROM THE MENU ABOVE: ");
        fgets(user_input, MAX_LENGTH, stdin);
        if (strlen(user_input) == 2)
        {
            if (user_input[0] == '1' || user_input[0] == '2')
            {
                char confirm[MAX_LENGTH];
                printf( "\n\n------------------------------------------------\n\n"
                        "ARE YOU SURE YOU WOULD LIKE TO DELETE THIS GAME? (Y/N): ");
                fgets(confirm, MAX_LENGTH, stdin);
                
                if (confirm[0] == 'Y' || confirm[0] == 'y')
                {
                    char* filename = "TEST FILE.txt";
                    selection = delete_file(filename);
                }
                else
                {
                    selection = 1;
                }
            }
            else if (user_input[0] == '0')
            {
                selection = 0;
            }
        }
        else
        {
            selection = 1;
        }
    } while (selection != 0);
    return 1;
}

int display_board()
{
    int selection;
    char user_input[MAX_LENGTH], confirm[MAX_LENGTH];
    do
    {    
        printf("\n\n------------------------------------------------\n\n");
        printf("      ");
        for (int x = 1; x <= board_size; x++)
        {
            printf("X:%d  ", x);
        }
        printf("\n\n");
        for (int i = 0; i < board_size; i++)
        {
            if (i == 9)
            {
                printf("Y:%d   ", i + 1);
            }
            else
            {
                printf("Y:%d    ", i + 1);
            }
            for (int j = 0; j < board_size; j++)
            {
                printf("%c    ", game_board[i][j]);
            }
            printf("\n\n");
        }
        printf( "------------------------------------------------\n\n"
                    "CURRENT SCORE %.2f\n\n", calculate_score());
        if(!show_swap_points)
        {
            printf("GREAT MOVE! THAT SWAP SCORED YOU %d POINTS!\n\n", swap_points);
        }
        printf( "1. MAKE A SWAP\t\t2. SAVE THE CURRENT GAME\n"
                "3. START A NEW GAME\t4. QUIT THE CURRENT GAME\n"
                "\n------------------------------------------------\n"
                "PLEASE MAKE A SELECTION FROM THE MENU ABOVE: ");
        fgets(user_input, MAX_LENGTH, stdin);
        if (strlen(user_input) == 2)
        {
            if (user_input[0] == '1')
            {
                selection = 1;
            }
            else if (user_input[0] == '2')
            {
                selection = 2;
            }
            else if (user_input[0] == '3')
            {
                printf( "\n\n------------------------------------------------\n\n"
                        "ARE YOU SURE YOU WOULD LIKE TO START A NEW GAME? (Y/N): ");
                fgets(confirm, MAX_LENGTH, stdin);
                
                if (confirm[0] == 'Y' || confirm[0] == 'y')
                {
                    selection = 3;
                }
                else 
                {
                    show_swap_points = true; 
                    selection = 4;
                }
            }
            else if (user_input[0] == '4')
            {
                printf( "\n\n------------------------------------------------\n\n"
                        "ARE YOU SURE YOU WOULD LIKE TO QUIT THIS GAME? (Y/N): ");
                fgets(confirm, MAX_LENGTH, stdin);
                
                if (confirm[0] == 'Y' || confirm[0] == 'y')
                {
                    printf( "\n\n------------------------------------------------\n\n"
                            "YOUR TOTAL SCORE FOR THIS GAME WAS: %.2f\n", calculate_score());
                    selection = 0;
                }
                else
                {
                    show_swap_points = true;
                    selection = 4;
                }
            }
        }
        else
        {
            selection = 4;
        }
    } while (selection == 4);
    return selection;
}

void free_memory()
{
    for (int i = 0; i < board_size; i++)
    {
        free(game_board[i]);
    }
    free(game_board);
    free(game_symbols);
}

int generate_symbol(int* symbols)
{
    int number = rand() % symbol_count + 1;
    return symbols[number-1];
}

void initialise_saved_game(char* filename)
{
    char str[MAX_LENGTH];
    FILE *inputfile = fopen(filename, "r");
    if (inputfile == NULL)
    {      
        printf("ERROR: UNABLE TO SAVE YOUR GAME\n");    
        return;
    }
    swap_points = atoi(fgets(str, MAX_LENGTH, inputfile));
    total_points = atoi(fgets(str, MAX_LENGTH, inputfile));
    board_size = atoi(fgets(str, MAX_LENGTH, inputfile));
    symbol_count = atoi(fgets(str, MAX_LENGTH, inputfile));
    time_adjustment = atoi(fgets(str, MAX_LENGTH, inputfile));
    game_board = create_board_array();
    game_symbols = (int *)calloc(symbol_count, sizeof(int));
    for (int i = 0; i < board_size; i++)
    {
        for (int j = 0; j < board_size; j++)
        {
            game_board[i][j] = atoi(fgets(str, MAX_LENGTH, inputfile));
        }
    }                
    for (int k = 0; k < symbol_count; k++)
    {
        game_symbols[k] = atoi(fgets(str, MAX_LENGTH, inputfile));
    }
    show_swap_points = false;
    fclose(inputfile);
}

bool is_adjacent(int fy, int fx, int ty, int tx)
{
    if ((fy - 1 == ty || fy + 1 == ty) && fx == tx)
    {
        return true;
    }
    else if ((fx - 1 == tx || fx + 1 == tx) && fy == ty)
    {
        return true;
    }
    return false;
}

bool is_grouping(int x, int y)
{
    group_location[0] = 0, group_location[1] = 0, group_location[2] = 0;
    int symbol = game_board[y][x];

    if (is_valid_coordinate(x + 1, y) && game_board[y][x + 1] == symbol)
    {
        if (is_valid_coordinate(x + 1, y + 1) && game_board[y + 1][x + 1] == symbol)
        {
            group_location[0] = 2, group_location[1] = x + 1, group_location[2] = y;
            return true;
        }
        else if (is_valid_coordinate(x + 1, y - 1) && game_board[y - 1][x + 1] == symbol)
        {
            group_location[0] = 3, group_location[1] = x + 1, group_location[2] = y;
            return true;
        }
        else if (is_valid_coordinate(x, y + 1) && game_board[y + 1][x] == symbol)
        {
            group_location[0] = 1, group_location[1] = x, group_location[2] = y;
            return true;
        }
        else if (is_valid_coordinate(x, y - 1) && game_board[y - 1][x] == symbol)
        {
            group_location[0] = 4, group_location[1] = x, group_location[2] = y;
            return true;
        }
    }

    if (is_valid_coordinate(x - 1, y) && game_board[y][x - 1] == symbol)
    {
        if (is_valid_coordinate(x - 1, y + 1) && game_board[y + 1][x - 1] == symbol)
        {
            group_location[0] = 1, group_location[1] = x - 1, group_location[2] = y;
            return true;
        }
        else if (is_valid_coordinate(x - 1, y - 1) && game_board[y - 1][x - 1] == symbol)
        {
            group_location[0] = 4, group_location[1] = x - 1, group_location[2] = y;
            return true;
        }
        else if (is_valid_coordinate(x, y + 1) && game_board[y + 1][x] == symbol)
        {
            group_location[0] = 2, group_location[1] = x, group_location[2] = y;
            return true;
        }
        else if (is_valid_coordinate(x, y - 1) && game_board[y - 1][x] == symbol)
        {
            group_location[0] = 3, group_location[1] = x, group_location[2] = y;
            return true;
        }
    }

    if (is_valid_coordinate(x, y - 1) && game_board[y - 1][x] == symbol)
    {
        if (is_valid_coordinate(x - 1, y - 1) && game_board[y - 1][x - 1] == symbol)
        {
            group_location[0] = 2, group_location[1] = x, group_location[2] = y - 1;
            return true;
        }
        else if (is_valid_coordinate(x + 1, y - 1) && game_board[y - 1][x + 1] == symbol)
        {
            group_location[0] = 1, group_location[1] = x, group_location[2] = y - 1;
            return true;
        }
    }

    if (is_valid_coordinate(x, y + 1) && game_board[y + 1][x] == symbol)
    {
        if (is_valid_coordinate(x - 1, y + 1) && game_board[y + 1][x - 1] == symbol)
        {
            group_location[0] = 3, group_location[1] = x, group_location[2] = y + 1;
            return true;
        }
        else if (is_valid_coordinate(x + 1, y + 1) && game_board[y + 1][x + 1] == symbol)
        {
            group_location[0] = 4, group_location[1] = x, group_location[2] = y + 1;
            return true;
        }
    }
    return false;
}

bool is_number(char* str)
{
    for (int i = 0; str[i] != '\0'; i++)
    {
        if (isdigit(str[i]) == 0)
        {
            return false;
        }
    }
    return true;
}

bool is_valid_coordinate(int x, int y)
{
    bool valid_x = x <= board_size - 1 && x >= 0;
    bool valid_y = y <= board_size - 1 && y >= 0;
    return (valid_x && valid_y);
}

bool is_valid_swap(int fy, int fx, int ty, int tx)
{
    if (is_valid_coordinate(fy, fx) && is_valid_coordinate(ty, tx) && is_adjacent(fy, fx, ty, tx))
    {
        swap_symbols(fy, fx, ty, tx);
        if(is_grouping(tx, ty))
        {
            return true;
        }
        else
        {
            swap_symbols(fy, fx, ty, tx);
            return false;
        }
    }
    return false;
}

int make_swap()
{
    int fy, fx, ty, tx;
    char user_input[MAX_LENGTH];
    do
    {
        printf("\nENTER THE X COORDINATE FOR THE SYMBOL YOU WISH TO MOVE: ");
        fgets(user_input, MAX_LENGTH, stdin);
        user_input[strlen(user_input) - 1] = '\0';
    } while (!atoi(user_input));
    fx = atoi(user_input) - 1;
    
    do
    {
        printf("\nENTER THE Y COORDINATE FOR THE SYMBOL YOU WISH TO MOVE: ");
        fgets(user_input, MAX_LENGTH, stdin);
        user_input[strlen(user_input) - 1] = '\0';
    } while (!atoi(user_input));
    fy = atoi(user_input) - 1;

    do
    {
        printf("\nENTER THE X COORDINATE FOR THE SYMBOL YOU WISH TO SWAP IT WITH: ");
        fgets(user_input, MAX_LENGTH, stdin);
        user_input[strlen(user_input) - 1] = '\0';
    } while (!atoi(user_input));
    tx = atoi(user_input) - 1;

    do
    {
        printf("\nENTER THE Y COORDINATE FOR THE SYMBOL YOU WISH TO SWAP IT WITH: ");
        fgets(user_input, MAX_LENGTH, stdin);
        user_input[strlen(user_input) - 1] = '\0';
    } while (!atoi(user_input));
    ty = atoi(user_input) - 1;

    if (is_valid_swap(fy, fx, ty, tx))
    {
        swap_points = 30;
        replace_grouping(game_board, game_symbols);
        while (check_board(game_board, game_symbols))
        {
            swap_points += 30;
            replace_grouping(game_board, game_symbols);
        }
        total_points += swap_points;
        return 1;
    }

    else
    {
        printf( "\n------------------------------------------------\n"
                "\nINVALID SWAP - PLEASE TRY AGAIN");
        return 2;
    }
}

int open_file_menu()
{
    int selection, file_number;
    char user_input[MAX_LENGTH], str[MAX_LENGTH];
    do
    {
        printf( "\n\n------------------------------------------------\n\n"
                "OPEN A GAME\n\n");
        int count = 1;
        FILE *inputfile = fopen("saved_games.txt", "r");
        if (inputfile == NULL)
        {      
            printf("ERROR: UNABLE TO SAVE YOUR GAME\n");    
            return 1;
        }
        while((fgets(str, MAX_LENGTH, inputfile)) != NULL)
        {
            printf("%d.\t%s", count, str);
            count++;
        }
        fclose(inputfile);
        printf( "0.\tRETURN TO VIEW SAVED GAMES MENU\n"
                "\n------------------------------------------------\n"
                "PLEASE MAKE A SELECTION FROM THE MENU ABOVE: ");
        fgets(user_input, MAX_LENGTH, stdin);
        user_input[strlen(user_input) - 1] = '\0';
        if (is_number(user_input))
        {
            int file_number = atoi(user_input);
            if (file_number == 0)
            {
                selection = 0;
            }
            else if (file_number > 0)
            {                 
                selection = start_new_game(file_number);
                while (selection == 4)
                {
                    selection = start_new_game(0);
                }
                if (selection == 1)
                {
                    return 0;
                }
            }
            else
            {
                selection = 1;
            }
        }
        else
        {
            selection = 1;
        }
    } while (selection != 0);
    return 1;
}

void replace_grouping()
{
    int shape = group_location[0], x = group_location[1], y = group_location[2];

    if (shape == 1)
    {
        if (is_valid_coordinate(x + 3, y))
        {
            game_board[y][x] = game_board[y][x + 2];
            game_board[y][x + 1] = game_board[y][x + 3];
            if (is_valid_coordinate(x, y + 2))
            {
                game_board[y + 1][x] = game_board[y + 2][x];
                while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y + 1][x])
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                }
            }
            else
            {
                do
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y + 1][x]);
            }
        }

        else if (is_valid_coordinate(x + 2, y))
        {
            game_board[y][x + 1] = game_board[y][x + 2];
            if (is_valid_coordinate(x, y + 3))
            {
                game_board[y][x] = game_board[y + 2][x];
                game_board[y + 1][x] = game_board[y + 3][x];
                while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y + 1][x])
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                }
            }
            else if (is_valid_coordinate(x, y + 2))
            {
                game_board[y][x] = game_board[y + 2][x];
                do
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y + 1][x]);
            }
            else
            {
                game_board[y][x] = generate_symbol(game_symbols);
                do
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y + 1][x]);
            }
        }

        else if (is_valid_coordinate(x, y + 3))
        {
            game_board[y][x] = game_board[y + 2][x];
            game_board[y + 1][x] = game_board[y + 3][x];
            do
            {
                game_board[y][x + 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y + 1][x]);
        }

        else if (is_valid_coordinate(x, y + 2))
        {
            game_board[y][x] = game_board[y + 2][x];
            game_board[y + 1][x] = generate_symbol(game_symbols);
            do
            {
                game_board[y][x + 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y + 1][x]);
        }

        else
        {
            game_board[y][x] = generate_symbol(game_symbols);
            game_board[y + 1][x] = generate_symbol(game_symbols);
            do
            {
                game_board[y][x + 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y + 1][x]);
        }
    }

    if (shape == 2)
    {
        if (is_valid_coordinate(x - 3, y))
        {
            game_board[y][x] = game_board[y][x - 2];
            game_board[y][x - 1] = game_board[y][x - 3];
            if (is_valid_coordinate(x, y + 2))
            {
                game_board[y + 1][x] = game_board[y + 2][x];
                while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y + 1][x])
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                }
            }
            else
            {
                do
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y + 1][x]);
            }
        }

        else if (is_valid_coordinate(x - 2, y))
        {
            game_board[y][x - 1] = game_board[y][x - 2];
            if (is_valid_coordinate(x, y + 3))
            {
                game_board[y][x] = game_board[y + 2][x];
                game_board[y + 1][x] = game_board[y + 3][x];
                while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y + 1][x])
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                }
            }
            else if (is_valid_coordinate(x, y + 2))
            {
                game_board[y][x] = game_board[y + 2][x];
                do
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y + 1][x]);
            }
            else
            {
                game_board[y][x] = generate_symbol(game_symbols);
                do
                {
                    game_board[y + 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y + 1][x]);
            }
        }

        else if (is_valid_coordinate(x, y + 3))
        {
            game_board[y][x] = game_board[y + 2][x];
            game_board[y + 1][x] = game_board[y + 3][x];
            do
            {
                game_board[y][x - 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y + 1][x]);
        }

        else if (is_valid_coordinate(x, y + 2))
        {
            game_board[y][x] = game_board[y + 2][x];
            game_board[y + 1][x] = generate_symbol(game_symbols);
            do
            {
                game_board[y][x - 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y + 1][x]);
        }

        else
        {
            game_board[y][x] = generate_symbol(game_symbols);
            game_board[y + 1][x] = generate_symbol(game_symbols);
            do
            {
                game_board[y][x - 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y + 1][x]);
        }
    }

    if (shape == 3)
    {
        if (is_valid_coordinate(x - 3, y))
        {
            game_board[y][x] = game_board[y][x - 2];
            game_board[y][x - 1] = game_board[y][x - 3];
            if (is_valid_coordinate(x, y - 2))
            {
                game_board[y - 1][x] = game_board[y - 2][x];
                while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y - 1][x])
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                }
            }
            else
            {
                do
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y - 1][x]);
            }
        }

        else if (is_valid_coordinate(x - 2, y))
        {
            game_board[y][x - 1] = game_board[y][x - 2];
            if (is_valid_coordinate(x, y - 3))
            {
                game_board[y][x] = game_board[y - 2][x];
                game_board[y - 1][x] = game_board[y - 3][x];
                while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y - 1][x])
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                }
            }
            else if (is_valid_coordinate(x, y - 2))
            {
                game_board[y][x] = game_board[y - 2][x];
                do
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y - 1][x]);
            }
            else
            {
                game_board[y][x] = generate_symbol(game_symbols);
                do
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y - 1][x]);
            }
        }

        else if (is_valid_coordinate(x, y - 3))
        {
            game_board[y][x] = game_board[y - 2][x];
            game_board[y - 1][x] = game_board[y - 3][x];
            do
            {
                game_board[y][x - 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y - 1][x]);
        }

        else if (is_valid_coordinate(x, y - 2))
        {
            game_board[y][x] = game_board[y - 2][x];
            game_board[y - 1][x] = generate_symbol(game_symbols);
            do
            {
                game_board[y][x - 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y - 1][x]);
        }

        else
        {
            game_board[y][x] = generate_symbol(game_symbols);
            game_board[y - 1][x] = generate_symbol(game_symbols);
            do
            {
                game_board[y][x - 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x - 1] && game_board[y][x] == game_board[y - 1][x]);
        }
    }

    if (shape == 4)
    {
        if (is_valid_coordinate(x + 3, y))
        {
            game_board[y][x] = game_board[y][x + 2];
            game_board[y][x + 1] = game_board[y][x + 3];
            if (is_valid_coordinate(x, y - 2))
            {
                game_board[y - 1][x] = game_board[y - 2][x];
                while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y - 1][x])
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                }
            }
            else
            {
                do
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y - 1][x]);
            }
        }

        else if (is_valid_coordinate(x + 2, y))
        {
            game_board[y][x + 1] = game_board[y][x + 2];
            if (is_valid_coordinate(x, y - 3))
            {
                game_board[y][x] = game_board[y - 2][x];
                game_board[y - 1][x] = game_board[y - 3][x];
                while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y - 1][x])
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                }
            }
            else if (is_valid_coordinate(x, y - 2))
            {
                game_board[y][x] = game_board[y - 2][x];
                do
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y - 1][x]);
            }
            else
            {
                game_board[y][x] = generate_symbol(game_symbols);
                do
                {
                    game_board[y - 1][x] = generate_symbol(game_symbols);
                } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y - 1][x]);
            }
        }

        else if (is_valid_coordinate(x, y - 3))
        {
            game_board[y][x] = game_board[y - 2][x];
            game_board[y - 1][x] = game_board[y - 3][x];
            do
            {
                game_board[y][x + 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y - 1][x]);
        }

        else if (is_valid_coordinate(x, y - 2))
        {
            game_board[y][x] = game_board[y - 2][x];
            game_board[y - 1][x] = generate_symbol(game_symbols);
            do
            {
                game_board[y][x + 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y - 1][x]);
        }

        else
        {
            game_board[y][x] = generate_symbol(game_symbols);
            game_board[y - 1][x] = generate_symbol(game_symbols);
            do
            {
                game_board[y][x + 1] = generate_symbol(game_symbols);
            } while (game_board[y][x] == game_board[y][x + 1] && game_board[y][x] == game_board[y - 1][x]);
        }
    }    
}

void populate_board()
{
    for (int y = 0; y < board_size; y++)
    {
        for (int x = 0; x < board_size; x++)
        {
            do
            {
                game_board[y][x] = generate_symbol(game_symbols);
            } while (is_grouping(x, y));
        }
    }    
}

int save_game(int time_adjustment)
{
    time_adjustment = end_seconds - start_seconds;
    char user_input[MAX_LENGTH], str_score[5], buffer[MAX_LENGTH];
    do
    {
        printf( "\n------------------------------------------------\n\n"
                "ENTER A FILENAME (NO FILE EXTENSION - MAX 30 CHARACTERS): ");
        fgets(user_input, MAX_LENGTH, stdin);
        user_input[strlen(user_input) - 1] = '\0';
    } while (strlen(user_input) < 1 || strlen(user_input) > 30);

    // Get the current time - save it to a string.
    time_t t = time(NULL);
    struct tm *tm = localtime(&t);
    char* time = asctime(tm);
    time[strlen(time) - 1] = '\0';
    
    // Get the current score - save it to a string.
    double score = total_points / ((double)(end_seconds - start_seconds) / CLOCKS_PER_SEC);
    sprintf(str_score, "%.2lf", score);

    char* filename = concat_filename(user_input, str_score, time);

    if (validate_filename(filename))
    {
        FILE *outputfile = fopen(filename, "w");
        if (outputfile == NULL)
        {      
            printf("ERROR: UNABLE TO SAVE YOUR GAME\n");     
            return 1;
        }
        sprintf(buffer, "%d\n", swap_points);
        fputs(buffer, outputfile);
        sprintf(buffer, "%d\n", total_points);
        fputs(buffer, outputfile);
        sprintf(buffer, "%d\n", board_size);
        fputs(buffer, outputfile);
        sprintf(buffer, "%d\n", symbol_count);
        fputs(buffer, outputfile);
        sprintf(buffer, "%d\n", time_adjustment);
        fputs(buffer, outputfile);

        for (int i = 0; i < board_size; i++)
        {
            for (int j = 0; j < board_size; j++)
            {
                sprintf(buffer, "%d\n", game_board[i][j]);
                fputs(buffer, outputfile);
            }
        }                
        for (int k = 0; k < symbol_count; k++)
        {
            sprintf(buffer, "%d\n", game_symbols[k]);
            fputs(buffer, outputfile);
        }
        fclose(outputfile);
    }

    FILE *outputfile = fopen("saved_games.txt", "a");
    if (outputfile == NULL)
    {      
        printf("ERROR: UNABLE TO SAVE YOUR GAME\n");    
        return 1;
    }
    fputs(filename, outputfile);
    fputc('\n', outputfile);
    fclose(outputfile);



    printf( "\n------------------------------------------------\n\n"
            "YOUR GAME HAS BEEN SAVED!");
    return 1;
}

int saved_games_menu()
{
    int selection;
    char user_input[MAX_LENGTH];
    do
    {
        printf( "\n\n------------------------------------------------\n\n"
                "SAVED GAMES MENU\n\n"
                "1. OPEN A GAME\n"
                "2. DELETE A GAME\n"
                "3. RETURN TO MAIN MENU\n"
                "\n------------------------------------------------\n"
                "PLEASE MAKE A SELECTION FROM THE MENU ABOVE: ");
        fgets(user_input, MAX_LENGTH, stdin);
        if (strlen(user_input) == 2)
        {
            if (user_input[0] == '1')
            {
                selection = open_file_menu();
            }
            else if (user_input[0] == '2')
            {
                selection = delete_file_menu();
            }
            else if (user_input[0] == '3')
            {
                selection = 0;
            }
        }
        else
        {
            selection = 1;
        }
    } while (selection != 0);
    return 1;
}

void start_clock(int time_adjustment)
{
    int begin = clock();
    start_seconds = begin - time_adjustment;
    return;
}

int start_new_game(int game_type)
{
    bool symbols_in_use[MAX_SYMBOLS] = {false};
    int selection;
    if (game_type == 0)
    {
        time_adjustment = 0, total_points = 0, board_size = 0, symbol_count = 0;
        show_swap_points = true;
        char user_input[MAX_LENGTH];
        while (board_size < 5 || board_size > 10)
        {
            printf( "\n------------------------------------------------\n\n"
                    "ENTER THE SIZE OF THE BOARD YOU WISH TO PLAY ON (MIN: 5, MAX: 10): ");
            fgets(user_input, MAX_LENGTH, stdin);
            board_size = atoi(user_input);
        }

        while (symbol_count < board_size - 2 || symbol_count > board_size)
        {
            printf("\nENTER THE NUMBER OF SYMBOLS YOU WISH TO PLAY WITH (MIN: %d, MAX: %d): ", board_size - 2, board_size);
            fgets(user_input, MAX_LENGTH, stdin);
            symbol_count = atoi(user_input);
        }
        game_board = create_board_array();
        game_symbols = create_symbols_array(symbols_in_use);
        populate_board(game_board, game_symbols);
    }
    if (game_type > 0)
    {
        int count = 1;
        char str[MAX_LENGTH];
        FILE *inputfile = fopen("saved_games.txt", "r");
        if (inputfile == NULL)
        {      
            printf("ERROR: UNABLE TO OPEN YOUR GAME\n");    
            return 1;
        }
        while((fgets(str, MAX_LENGTH, inputfile)) != NULL)
        {
            if (game_type == count)
            {
                str[strlen(str) - 1] = '\0';
                initialise_saved_game(str);
                break;
            }
            count++;
        }
    }

    start_clock(time_adjustment);
    do
    {
        selection = display_board(game_board, show_swap_points);
        if (selection == 1)
        {
            selection = make_swap(game_board, game_symbols);
            if (selection == 1)
            {
                show_swap_points = false;
            }
            else
            {
                show_swap_points = true;
            }              
        }
        else if (selection == 2)
        {
            selection = save_game(time_adjustment);
            show_swap_points = true; 
        }
        else if (selection == 3)
        {
            free_memory(game_board, game_symbols);
            return 4;
        }
    } while (selection != 0);
    free_memory(game_board, game_symbols);
    return 1;
}

double stop_clock()
{
    end_seconds = clock();
    double duration = (double)(end_seconds - start_seconds) / CLOCKS_PER_SEC;
    return duration;
}

void swap_symbols(int fy, int fx, int ty, int tx)
{
    int temp = game_board[ty][tx];
    game_board[ty][tx] = game_board[fy][fx];
    game_board[fy][fx] = temp; 
}

bool validate_filename(char* filename)
{
    FILE *outputfile = fopen(filename, "r");
    if (outputfile == NULL)
    {      
        return true;
    }
    fclose(outputfile);
    return false;
}